type Query {
  posts(query: String): [Post!]!
  users(query: String): [User!]!
  greeting(name: String): String!
  add(a: Float!, b: Float!): Float!
  add1(arr: [Float!]!): Float!
  grades: [Int!]!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteUser(id: ID!): User!
  deletePost(id: ID!): Post!
  deleteComment(id: ID!): Comment!
  updateUser(data: updateUserInput): User!
  updatePost(id: ID!, data: updatePostInput): Post!
  updateComment(id: ID!, data: updateCommentInput): Comment!
  login(data: AuthInput): AuthPayload!
}
type AuthPayload {
  user: User!
  token: String!
}
type Subscription {
  count: Int!
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}
type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input AuthInput {
  email: String!
  password: String!
}
input updateCommentInput {
  text: String
}

input CreateUserInput {
  name: String!
  email: String!
  password: String
}
input updateUserInput {
  name: String
  email: String
}
input CreatePostInput {
  title: String!
  body: String
  published: Boolean!
}
input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String
  body: String!
  author: User!
  published: Boolean!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
